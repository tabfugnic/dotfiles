* Initialize
Define the very basics of things needed to run this configuration and
emacs

** Start Emacs Server
Use emacs server so that loading any subsequent emacs instances will
boot immediately. In practice I use that for the occasion I use git on
the command line

#+BEGIN_SRC emacs-lisp
  (server-start)
#+END_SRC

** Local configs
Rather than having custom change configurations in my emacs file
point it to a local file that is not saved in version control.

#+BEGIN_SRC emacs-lisp
  (setq custom-file "~/.emacs.local")
  (load custom-file :noerror)
#+END_SRC

** Fix TLS
#+BEGIN_SRC emacs-lisp
(setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")
#+END_SRC
** Package Management(use-package)
use-package will manage our all of our packages. It requires no
external dependencies and takes advantage of emacs' package library

Manage packages and sources
#+BEGIN_SRC emacs-lisp
  (add-to-list 'package-archives
               '("melpa" . "https://melpa.org/packages/") t)
#+END_SRC

bootstrap use-package, so I can use it to manage everything else
#+BEGIN_SRC emacs-lisp
  (setq use-package-verbose t)
  (setq use-package-always-ensure t)

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

    (eval-when-compile (require 'use-package))
#+END_SRC

** Diminish
Diminish is used to simplify the modebar
#+BEGIN_SRC emacs-lisp
  (use-package diminish :defer t)
#+END_SRC

* Visuals
** Interface
Build interface to look how I want it to look

Remove all that excess crap I don't need, remove the menu bar the
scroll bar and the toolbar

#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
#+END_SRC

Set font that is bit easier to read and nice and big

#+BEGIN_SRC emacs-lisp
  (set-frame-font "-*-DejaVu Sans Mono-normal-normal-normal-*-22-*-*-*-m-0-iso10646-1")
#+END_SRC

Give more descriptive names to buffers that have the same name. In
this case it uses the folder it's in

#+BEGIN_SRC emacs-lisp
  (require 'uniquify)
  (setq uniquify-buffer-name-style 'post-forward-angle-brackets)
#+END_SRC

Why write out yes or no every single time when y and n will suffice

#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

Always require a new line

#+BEGIN_SRC emacs-lisp
  (setq require-final-newline t)
#+END_SRC

I like my lines highlighted and numbered

#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode t)
  (global-linum-mode t)
#+END_SRC

Visual cue for when lines are too long

#+BEGIN_SRC emacs-lisp
  (use-package whitespace
    :defer t
    :diminish whitespace-mode
    :init
    (setq whitespace-line-column 80)
    (setq whitespace-style '(face lines-tail))
    (add-hook 'prog-mode-hook 'whitespace-mode))
#+END_SRC

Never use tabs and by default lets use two spaces. We can change it
depending on the language

#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
  (setq-default standard-indent 2)
#+END_SRC

When searching make to highlight things I search for

#+BEGIN_SRC emacs-lisp
  (setq query-replace-highlight t)
#+END_SRC

Backups are more trouble than they are worth. That's why God (Linus
Torvald) created git

#+BEGIN_SRC emacs-lisp
  (setq make-backup-files nil)
  (setq auto-save-list-file-name  nil)
  (setq auto-save-default nil)
#+END_SRC

Automatically revert buffers to new content if unchanged

#+BEGIN_SRC emacs-lisp
  (put 'erase-buffer 'disabled nil)
  (global-auto-revert-mode t)
  (diminish 'auto-revert-mode)
#+END_SRC

Remove the whole start up screen and show a visible bell

#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
#+END_SRC

Show visible bell, good for when the sound is muted

#+BEGIN_SRC emacs-lisp
  (setq visible-bell t)
#+END_SRC

Make dired more verbose

#+BEGIN_SRC emacs-lisp
  (setq-default dired-listing-switches "-alhv")
#+END_SRC

When splitting buffers move to that new buffer immediately

#+BEGIN_SRC emacs-lisp
  (defun split-window-below-and-move()
    (interactive)
    (split-window-below)
    (other-window 1))

  ;; auto move cursor after split
  (defun split-window-right-and-move()
    (interactive)
    (split-window-right)
    (other-window 1))

  (global-set-key "\C-x2" 'split-window-below-and-move)

  (global-set-key "\C-x3" 'split-window-right-and-move)
#+END_SRC

Ask before closing Emacs

#+BEGIN_SRC emacs-lisp
(defun ask-before-closing ()
  "Ask whether or not to close, and then close if y was pressed"
  (interactive)
  (if (y-or-n-p (format "Exit Emacs? "))
      (if (< emacs-major-version 22)
          (save-buffers-kill-terminal)
        (save-buffers-kill-emacs))
    (message "Canceled exit")))

(when window-system
  (global-set-key (kbd "C-x C-c") 'ask-before-closing))
#+END_SRC

** Theme
Use a color theme

#+BEGIN_SRC emacs-lisp
  (use-package color-theme
    :bind
    ("C-|" . tabfugnic/cycle-theme)
    :init
    (use-package solarized-theme :defer t)
    (defun circular (items) (setf (cdr (last items)) items) items)
    (setq tabfugnic/theme-list (circular '(solarized-dark solarized-light)))
    (defun tabfugnic/cycle-theme()
      (interactive)
      (load-theme (pop tabfugnic/theme-list) t))
    (tabfugnic/cycle-theme))
#+END_SRC

** Golden ratio
#+BEGIN_SRC emacs-lisp
  (use-package golden-ratio
    :bind ("C-:" . golden-ratio)
    :defer 1
    :diminish golden-ratio-mode
    :init
    (setq golden-ratio-auto-scale nil)
    (setq golden-ratio-exclude-modes
          '(elfeed-entry-mode
            elfeed-search-mode
            mu4e-headers-mode
            mu4e-view-mode
            mu4e-loading-mode
            mu4e-org-mode
            mu4e-main-mode
            org-agenda-mode))
    (setq golden-ratio-extra-commands
          '(evil-window-left
            evil-window-right
            evil-window-up
            evil-window-down
            select-window-1
            select-window-2
            select-window-3
            select-window-4
            select-window-5)))
#+END_SRC

** Date
Use ISO date standard

#+BEGIN_SRC emacs-lisp
  (setq calendar-date-style 'iso)
#+END_SRC

* Env
#+BEGIN_SRC emacs-lisp
  (let ((go-path (shell-command-to-string ". ~/.bashrc; echo -n $GOPATH")))
    (setenv "GOPATH" go-path))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (setq mml-secure-openpgp-signers '("771AB877"))
#+END_SRC
* Edit Text
** Evil Mode

Use evil mode for most editing

#+BEGIN_SRC emacs-lisp
  (use-package evil
    :diminish undo-tree-mode
    :init
    (setq evil-toggle-key "C-`")
    (use-package linum-relative :defer t)
    (use-package evil-surround
      :config
      (global-evil-surround-mode 1))
    :config
    (evil-mode 1))
#+END_SRC

** Editing
No need to have trailing whitespace

#+BEGIN_SRC emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

Use CUA for block editing

#+BEGIN_SRC emacs-lisp
  (setq cua-enable-cua-keys nil)
  (cua-mode t)
#+END_SRC

Use Hippie Expand to expand things

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-SPC") 'hippie-expand)
#+END_SRC

Move by subwords ie treat underscore as space

#+BEGIN_SRC emacs-lisp
  (global-subword-mode t)
  (diminish 'subword-mode)
#+END_SRC

Set default spacing for all documents
#+BEGIN_SRC emacs-lisp
  (setq default-tab-width 2)
  (setq sh-basic-offset 2)
  (setq sh-indentation 2)
#+END_SRC

Break on commas
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-,") 'tabfugnic/break-on-comma)
  (global-set-key (kbd "C-;") 'tabfugnic/toggle-single-or-multiline-list)

  (defun tabfugnic/break-on-comma()
    (interactive)
    (while (not (looking-at ","))
      (forward-char))
    (forward-char)
    (if (not (looking-at "^J"))
        (newline-and-indent)))

  (defun tabfugnic/toggle-single-or-multiline-list()
    (interactive)
    (if (not (tabfugnic/singleline-p))
        (tabfugnic/singleline-list)
      (tabfugnic/multiline-list)))

  (defun tabfugnic/multiline-list()
    (interactive)
    (let ((beg (point)))
      (forward-char)
      (newline-and-indent)
      (end-of-line 0)
      (backward-char)
      (forward-list)
      (backward-char)
      (if (not (looking-at ","))
          (insert ","))
      (while (<= beg (point))
        (backward-char)
        (when (and (looking-at ",") (tabfugnic/in-parent-list-p beg))
          (forward-char)
          (newline-and-indent)
          (previous-line)
          (end-of-line)
          (backward-char))
        )
      (forward-char)))

  (defun tabfugnic/singleline-list()
    (interactive)
    (let ((beg (line-number-at-pos)))
      (forward-list)
      (while (< beg (line-number-at-pos))
        (join-line))
      (backward-char)
      (forward-list)
      (backward-char 2)
      (if (looking-at ",")
          (delete-forward-char 1))
      (forward-char)
      (backward-list)))

  (defun tabfugnic/singleline-p()
    (let ((beg-line (line-number-at-pos)) (start (point)))
      (forward-list)
      (let ((end-line (line-number-at-pos)))
        (goto-char start)
        (eq beg-line end-line))))

  (defun tabfugnic/in-parent-list-p(parent-beg)
    (let ((start (point)))
      (backward-up-list)
      (when (eq parent-beg (point))
        (goto-char start)
        t)))

#+END_SRC

** Multiple Cursor
#+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors
    :bind
    ("C-S-c C-S-c" . mc/edit-lines)
    ("C->" . mc/mark-next-like-this)
    ("C-<" . mc/mark-previous-like-this)
    ("C-c C-<" . mc/mark-all-like-this))
#+END_SRC

** Electric pair

Use electric pair to automatically match surrounding characters

#+BEGIN_SRC emacs-lisp
  (electric-pair-mode 1)
  (show-paren-mode 1)
#+END_SRC

* Support
** Company
#+BEGIN_SRC emacs-lisp
  (use-package company
    :defer t
    :diminish company-mode
    :init
    (add-hook 'after-init-hook 'global-company-mode))
#+END_SRC

** flycheck
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :defer t
  :init
  (add-hook 'after-init-hook #'global-flycheck-mode))
#+END_SRC

* Navigation
** Helm

Helm for most things involving input

#+BEGIN_SRC emacs-lisp
  (use-package helm
    :diminish helm-mode
    :bind
    ("M-x" . helm-M-x)
    ("C-S-s" . helm-do-ag-project-root)
    ("C-x C-f" . helm-find-files)
    :init
    (use-package helm-ag
      :defer t
      :init
      (setq helm-M-x-fuzzy-match t))
    (progn
      (require 'helm-config)
      (helm-mode))
    (use-package helm-tramp
      :defer t
      :config
      (add-hook 'helm-tramp-pre-command-hook
                '(lambda ()
                   (projectile-mode 0)))
      (add-hook 'helm-tramp-quit-hook
                '(lambda ()
                   (projectile-mode 1)))))
#+END_SRC

** Dired

Use a better dired, now with extras

#+BEGIN_SRC emacs-lisp
(require 'dired-x)
#+END_SRC

** Directory
#+BEGIN_SRC emacs-lisp
  (defun tabfugnic/next-file-in-directory(&optional number)
    (interactive)
    (or number (setq number 1))
    (let
        ((filename (file-name-nondirectory (buffer-file-name)))
         (files (cl-remove-if
                 'file-directory-p
                 (directory-files
                  (file-name-directory (buffer-file-name))
                  nil
                  directory-files-no-dot-files-regexp))))
      (find-file
       (nth (mod (+ (cl-position filename files :test 'equal) number)
         (length files))
        files))))

  (defun tabfugnic/previous-file-in-directory()
    (interactive)
    (tabfugnic/next-file-in-directory -1))


  (global-set-key (kbd "C-{") 'tabfugnic/previous-file-in-directory)
  (global-set-key (kbd "C-}") 'tabfugnic/next-file-in-directory)
#+END_SRC

** Projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :defer 3
    :diminish projectile-mode
    :init
    (use-package helm-projectile
      :config
      (helm-projectile-on))
    :config
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
    (projectile-global-mode))
#+END_SRC

** Global and GGTags
  #+BEGIN_SRC emacs-lisp
(use-package ggtags
  :defer t
  :init
  (add-hook 'enh-ruby-mode-hook ( lambda() ( ggtags-mode 1 ))))
#+END_SRC

** Important Files
  #+BEGIN_SRC emacs-lisp
    (defun tabfugnic/open-inbox ()
    (interactive)
     (find-file (expand-file-name "~/cloud/org/inbox.org")))

    (global-set-key (kbd "C-c i") 'tabfugnic/open-inbox)
#+END_SRC

* Language/Programming
** Version Management
Manage versions of different tools using asdf(https://asdf-vm.com)
simplifying workflows and limiting tools

#+BEGIN_SRC emacs-lisp
  (load-file "~/dev/tabfugnic/asdf.el/asdf.el")
  (require 'asdf)

  (asdf-enable)
#+END_SRC

** Android

Use android major mode

#+BEGIN_SRC emacs-lisp
  (use-package android-mode
    :defer t
    :init
    (custom-set-variables '(android-mode-sdk-dir "~/opt/android")))
#+END_SRC

** C/C++

#+BEGIN_SRC emacs-lisp
  (c-set-offset 'arglist-intro '+)
#+END_SRC

** Cucumber
#+BEGIN_SRC emacs-lisp
(use-package feature-mode
  :mode "\\.feature$")
#+END_SRC

** Emacs Lisp

Auto compile elisp files on load/save.

#+BEGIN_SRC emacs-lisp
  (use-package auto-compile
    :defer t
    :init
    (setq load-prefer-newer t)
    :config
    (auto-compile-on-load-mode)
    (auto-compile-on-save-mode))
#+END_SRC

** Go
#+BEGIN_SRC emacs-lisp
  (use-package go-mode
    :mode "\\.go$"
    :init
    (use-package gotest
      :bind
      (:map go-mode-map
            ("C-c , v" . go-test-current-test)
            ("C-c , a" . go-test-current-project)
            ("C-c , b" . go-test-current-benchmark)
            ("C-c , x" . go-run))))
#+END_SRC
** Haskell
#+BEGIN_SRC emacs-lisp
(use-package haskell-mode
  :defer t
  :init
  (add-hook 'haskell-mode-hook 'turn-on-haskell-indent)
  (add-hook 'haskell-mode-hook 'turn-on-haskell-decl-scan)
  :bind
  (:map haskell-mode-map
        ("C-," . haskell-move-nested-left)
        ("C-." . haskell-move-nested-right)
        ("C-c C-c" . haskell-compile)))
#+END_SRC

** HTML/CSS
#+BEGIN_SRC emacs-lisp
(use-package emmet-mode
  :defer t
  :init
  (setq emmet-indentation 2))
#+END_SRC

** Java

Add imports to java file quickly and easily
#+BEGIN_SRC emacs-lisp
  (use-package java-imports :defer t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package eclim
  :defer t
  :config
  (global-eclim-mode))
#+END_SRC

** Javascript/Typescript
#+BEGIN_SRC emacs-lisp
(use-package js2-mode
  :mode ("\\.js$")
  :init
  (setq js-indent-level 2))
#+END_SRC

#+BEGIN_SRC emacs-lisp
;; JSX mode
(use-package rjsx-mode :defer t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package vue-mode
    :defer t
    :init
    (setq mmm-submode-decoration-level 0))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package tide
    :defer t
    :init
    (defun tabfugnic/tide-setup ()
      (tide-setup)
      (flycheck-mode +1)
      (eldoc-mode +1)
      (tide-hl-identifier-mode +1)
      (company-mode +1)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package typescript-mode
    :defer t
    :hook (tabfugnic/tide-setup))
#+END_SRC

** JSON
Basic json parsing

#+BEGIN_SRC emacs-lisp
  (use-package json-mode :defer t)
#+END_SRC

** LSP
Setup the language server protocol

#+BEGIN_SRC emacs-lisp
    (use-package lsp-mode
      :hook ((rust-mode . lsp)
             (enh-ruby-mode . lsp)
             (go-mode . lsp))
      :commands lsp)

    (use-package lsp-ui
      :commands lsp-ui-mode
      :config
      (setq lsp-prefer-flymake nil))
    (use-package company-lsp :commands company-lsp)
    (use-package helm-lsp :commands helm-lsp-workspace-symbol)
    (use-package dap-mode :defer t)
#+END_SRC

** Lua
#+BEGIN_SRC emacs-lisp
  (use-package lua-mode :defer t)
#+END_SRC
** Markdown
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :mode ("\\.markdown$" "\\.md$"))
#+END_SRC
** PHP
#+BEGIN_SRC emacs-lisp
(use-package php-mode
  :mode ("\\.php$" "\\.phtml")
  :interpreter "php")
#+END_SRC

** Ruby/Rails
#+BEGIN_SRC emacs-lisp
  (use-package enh-ruby-mode
    :mode ("\\.rb$" "\\.rake$" "Gemfile" "Guardfile" "RakeFile" "Fastfile")
    :interpreter "ruby"
    :init
    (use-package inf-ruby
      :defer t
      :init (add-hook 'after-init-hook 'inf-ruby-switch-setup))
    (use-package ruby-end
      :defer t
      :diminish ruby-end-mode)
    (use-package ruby-hash-syntax
      :bind ("C-c r h" . ruby-toggle-hash-syntax)))
#+END_SRC

Use web dev for ERB and html. Makes life so much easier than Multi Major Mode

#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :mode ("\\.html\\.erb$" "\\.liquid$" "\\.tsx$")
    :init
    (add-hook 'web-mode
              (lambda() (pcase (file-name-extension buffer-file-name)
                  ("tsx" (tabfugnic/tide-setup))
                  (_ ()))))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package rspec-mode
    :bind (:map rspec-mode ("C-c , u" . tabfugnic/rspec-set-test-env))
    :hook (haml-mode html-mode slim-mode web-mode coffee-mode enh-ruby-mode)
    :init
    (setq rspec-command-options "--format progress"))
#+END_SRC

** Rust
#+BEGIN_SRC emacs-lisp
  (use-package rust-mode
    :defer t
    :init
    (setq rust-format-on-save t))
  (use-package cargo
    :defer t
    :init
    (setenv "PATH" (concat (getenv "PATH") ":~/.cargo/bin"))
    (setq exec-path (append exec-path '("~/.cargo/bin"))))
  (use-package flycheck-rust
    :hook (flycheck-mode . flycheck-rust-setup))
#+END_SRC
** SCSS Mode
#+BEGIN_SRC emacs-lisp
(use-package scss-mode
  :mode ("\\.scss$" "\\.scss\\.erb$")
  :interpreter "scss"
  :init
  (setq scss-compile-at-save nil)
  (setq css-indent-offset 2))
#+END_SRC

** Slim/Haml
Definitely need Slim and HAML mode

#+BEGIN_SRC emacs-lisp
  (use-package slim-mode :defer t)
  (use-package haml-mode :defer t)
#+END_SRC

** Yaml
#+BEGIN_SRC emacs-lisp
(use-package yaml-mode
  :mode ("\\.yml$" "\\.yaml$")
  :interpreter "yaml")
#+END_SRC

* Applications
** RSS
Newsticker for RSS feeds

#+BEGIN_SRC emacs-lisp
  (use-package elfeed
    :bind ("C-x w" . tabfugnic/elfeed)
    :init
    (use-package elfeed-org
      :init (setq rmh-elfeed-org-files (list "/home/eric/cloud/org/rss.org"))
      :config (elfeed-org))
    :config
    (evil-set-initial-state 'elfeed-search-mode 'emacs)
    (evil-set-initial-state 'elfeed-show-mode 'emacs))

  (defun tabfugnic/elfeed()
    "Open elfeed and force open from db."
    (interactive)
    (elfeed-db-load)
    (elfeed))
#+END_SRC

** Blog

Setup blog
#+BEGIN_SRC emacs-lisp
  (setq tabfugnic/blog-dir "~/blog")
  (setq tabfugnic/blog-posts-dir (expand-file-name "_posts" tabfugnic/blog-dir))

  (defun tabfugnic/blog-new-entry(title)
    (interactive "MTitle: ")
    (let ((slug (tabfugnic/sluggify title)))
      (find-file (expand-file-name
                       (concat (format-time-string "%F") "-" slug ".md")
                       tabfugnic/blog-posts-dir))
      (insert "---\n")
      (insert "layout: post\n")
      (insert (format "title: %s\n" title))
      (insert (format "date: %s\n" (format-time-string "%F %R")))
      (insert "tags: \n")
      (insert "---\n")))

  (defun tabfugnic/sluggify(string)
    (replace-regexp-in-string
     "[^a-z0-9-]" "" (replace-regexp-in-string
                      "\\\s" "-" (downcase string))))
#+END_SRC

** Email(mu4e)
Use mu4e for all email. This takes advantage of offlineimap and msmtp

#+BEGIN_SRC emacs-lisp
  (use-package mu4e
    :defer t
    :load-path "/usr/local/share/emacs/site-lisp/mu4e"
    :bind ("C-x m" . mu4e)
    :init
    (add-hook 'mu4e-view-mode-hook 'visual-line-mode)
    (add-hook 'mu4e-compose-mode-hook 'mml-secure-message-sign)
    (add-hook 'mu4e-compose-mode-hook
              (defun my-setup-epa-hook ()
                (epa-mail-mode)))
    (add-hook 'mu4e-view-mode-hook
              (defun my-view-mode-hook ()
                (epa-mail-mode)))
    (use-package mu4e-alert
      :defer t
      :init
      (setq mu4e-maildir-shortcuts
            '( ("/INBOX"               . ?i)
               ("/sent"                . ?s)
               ("/archive"             . ?a)))

      (add-hook 'after-init-hook #'mu4e-alert-enable-notifications)
      (add-hook 'after-init-hook #'mu4e-alert-enable-mode-line-display))
      :config
      (mu4e-alert-set-default-style 'libnotify)


    :config
    (require 'org-mu4e)
    (setq mu4e-contexts
          `(,(make-mu4e-context
              :name "personal"
              :match-func (lambda (msg)
                            (when msg
                              (mu4e-message-contact-field-matches
                               msg
                               :to "me@ericj.co")))
              :enter-func '()
              :leave-func (lambda () (mu4e-clear-caches))
              :vars '((mu4e-maildir . "~/mail/personal")
                      (mu4e-mu-home . "~/.mu/personal")
                      (user-mail-address . "me@ericj.co")
                      (mu4e-compose-signature . (concat
                                                 "Eric J. Collins\n"
                                                 "Software Developer\n")
                                              )))))

    (setq mu4e-drafts-folder "/drafts")
    (setq mu4e-sent-folder   "/sent")
    (setq mu4e-trash-folder  "/trash")
    (setq mu4e-refile-folder "/archive")
    (setq mu4e-action-tags-header "X-Keywords")
    (setq mu4e-attachment-dir  "~/Downloads")
    (setq mu4e-html2text-command 'mu4e-shr2text)
    (setq mu4e-compose-dont-reply-to-self t)
    (setq user-full-name  "Eric J Collins")
    (setq mu4e-update-interval 180)
    (setq mu4e-user-mail-address-list '("me@ericj.co" "hello@ericcollins.me"))
    (setq mu4e-change-filenames-when-moving t)

    (setq message-send-mail-function 'message-send-mail-with-sendmail)
    (setq sendmail-program "/usr/local/bin/msmtp-enqueue.sh")
    (setq message-sendmail-extra-arguments '("--read-envelope-from"))
    (setq message-sendmail-f-is-evil 't)

    (setq mu4e-alert-interesting-mail-query
          (concat
           "flag:unread"
           " AND NOT flag:trashed"
           " AND maildir:"
           "\"/INBOX\""))

    (setq org-mu4e-link-query-in-headers-mode nil)

    (add-to-list 'mu4e-headers-custom-markers
                 '("Stale messages"
                   (lambda (msg &optional n)
                     (let ((email (cdar (mu4e-message-field msg :from))))
                       (or (string-match "\\@nytimes.com" email)
                           (string-match "\\@trello.com" email)
                           (string-match "\\@github.com" email)
                           (string-match "\\@notifications.heroku.com" email))))))

    (add-to-list 'mu4e-view-actions
                 '("xViewXWidget" . mu4e-action-view-with-xwidget) t)

    (defun tabfugnic/mu4e-headers-mark-stale-for-delete()
      (interactive)
      (mu4e-headers-for-each
       (lambda (msg)
         (let ((tags (mu4e-message-field msg :tags))
               (date (mu4e-message-field msg :date))
               (one-day-ago (subtract-time (current-time) 86400)))
           (when (and (member "temporary" tags) (time-less-p date one-day-ago))
             (mu4e-mark-at-point 'trash msg)))))))
#+END_SRC

** ERC
#+BEGIN_SRC emacs-lisp
(use-package erc
  :bind ("C-c e r" . tabfugnic/reset-erc-track-mode)
  :init
  (use-package erc-image
    :defer t
    :config
    (add-to-list 'erc-modules 'image))

  (setq erc-prompt-for-nickserv-password nil)
  (setq erc-fill-function 'erc-fill-static)
  (setq erc-fill-static-center 22)
  (setq erc-track-exclude-types '("JOIN" "NICK" "PART" "MODE"))
  (setq erc-hide-list '("JOIN" "PART" "QUIT" "MODE"))

  (setq erc-keywords '("\\NYC\\b"
                       "\\nyc\\b"
                       "\\pr\\b"
                       "\\PR\\b"
                       "\\:statue_of_liberty:\\b"
                       "\\corgi\\b"))

  (setq ercn-notify-rules
        '((current-nick . all)
          (keyword . all)))

  (add-hook 'ercn-notify 'tabfugnic/do-notify)

  :config
  (erc-update-modules)

  (require 'erc-join)
  (setq erc-autojoin-channels-alist
        '(("freenode.net" "#thoughtbot" "#emacs" "#emacsnyc")))
  (erc-autojoin-enable))

(defun tabfugnic/erc-start-or-switch ()
  "Connect to ERC, or switch to last active buffer"
  (interactive)
  (cond
    ((get-buffer "irc.freenode.net:6667")
     (erc-track-switch-buffer 1))
    (t (erc :server "irc.freenode.net" :port 6667 :nick "tabfugnic"))))

(defun tabfugnic/reset-erc-track-mode ()
  (interactive)
  (setq erc-modified-channels-alist nil)
  (erc-modified-channels-display))

(defun tabfugnic/do-notify (nickname message)
  (with-temp-buffer
    (shell-command (format "notify-send '%s: %s' -t 5000" nickname message) t)))
#+END_SRC
* Git(Magit)
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :bind ("C-x g" . magit-status)
    :config
    (defun tabfugnic/magit-delete-branch (branch)
      (interactive
       (magit-read-local-branch "Delete branch" (magit-get-previous-branch)))
      (magit-run-git "delete-branch" "" branch)))
#+END_SRC

* Org mode
#+BEGIN_SRC emacs-lisp
  (use-package org
    :defer t
    :bind (("C-c l" . org-store-link)
           ("C-c c" . org-capture)
           ("C-c a" . org-agenda)
           ("C-c b" . org-iswitchb))
    :init
    (load-file "~/dev/tabfugnic/org-retro/org-retro.el")
    (require 'org-retro)
    (use-package org-journal
      :defer 5
      :init
      (setq org-journal-dir "~/cloud/journal")
      (setq org-journal-date-format "%A %Y/%m/%d")
      (add-hook 'org-journal-mode-hook 'auto-fill-mode))
    (use-package org-caldav
      :defer t
      :init
      (setq org-caldav-url "https://cloud.ericj.co/remote.php/dav/calendars/tabfugnic")
      (setq org-caldav-calendar-id "calendar")
      (setq org-caldev-inbox "/home/eric/calendar.org")
      (setq org-icalendar-timezone "America/New_York"))

    (org-babel-do-load-languages
     'org-babel-load-languages
     '((shell . t)))
    (require 'org-agenda)
    (setq org-directory "~/cloud/org/")

    (defun tabfugnic/org-file (file)
      (concat org-directory file))

    (setq org-agenda-files (list (tabfugnic/org-file "todos.org")))

    (setq org-capture-templates
          `(("i" "Inbox"
             entry
             (file ,(tabfugnic/org-file "inbox.org"))
             "* %?\n:PROPERTIES:\n:CREATED: %U\n:END:\n")
            ("m" "Mail Inbox"
             entry
             (file ,(tabfugnic/org-file "inbox.org"))
             "* %?\n%a\n:PROPERTIES:\n:CREATED: %U\n:END:\n")
            ("c" "Copy Inbox"
             entry
             (file ,(tabfugnic/org-file "inbox.org"))
             "* %?\n:PROPERTIES:\n:CREATED: %U\n:END:\n%x\n")
            ("t" "TODO"
             entry
             (file ,(tabfugnic/org-file "todos.org"))
             "* TODO %?\n")
            ("h" "House"
             entry
             (file ,(tabfugnic/org-file "house.org"))
             "* %?\n[[%x][%^{link}]]\n")
            ("v" "Travel"
             plain
             (file ,(tabfugnic/org-file "travel.org"))
             "* %a\n %^G\n")
            ("m" "Movies"
             entry
             (file ,(tabfugnic/org-file "movies.org"))
             "* TODO %?\n %u\n")
            ("r" "RSS Feeds"
             entry
             (file+headline ,(tabfugnic/org-file "rss.org") "Unsorted Feeds")
             "*** [[%x][%?]]")))

    ;; Taken from
    ;; https://www.reddit.com/r/emacs/comments/6lzyg2/heres_how_to_do_emacsclient_global_orgcapture/
    ;; Modified slightly
    (defadvice org-capture-finalize
        (after delete-capture-frame activate)
      "Advise capture-finalize to close the frame"
      (if (equal "capture" (frame-parameter nil 'name))
          (delete-frame)))

    (defadvice org-capture-destroy
        (after delete-capture-frame activate)
      "Advise capture-destroy to close the frame"
      (if (equal "capture" (frame-parameter nil 'name))
          (delete-frame)))

    (defun make-capture-frame (&optional capture-key)
      "Create a new frame and run org-capture."
      (interactive)
      (or capture-key (setq capture-key "i"))
      (make-frame '((name . "capture")))
      (select-frame-by-name "capture")
      (delete-other-windows)
      (cl-letf
          (((symbol-function 'switch-to-buffer-other-window)
            #'switch-to-buffer))
        (org-capture nil capture-key))))
#+END_SRC

* Utils
  #+BEGIN_SRC emacs-lisp
    ;; (setq tabfugnic/previous-commands '())
    (set-face-attribute 'comint-highlight-prompt nil
                        :inherit nil)

    (defun tabfugnic/repeat-shell-commandline-in-project()
      (interactive)
      (setq tabfugnic/previous-command)
      ;; (setq tabfugnic/previous-commands
      ;;       (cons '((vc-root-dir) . "thing") tabfugnic/previous-commands))
    )
  #+END_SRC


  #+BEGIN_SRC emacs-lisp
(defun gitrep()
  (interactive "*")
  (find-file "~/dev"))
  #+END_SRC

  Sort lines with out case
  #+BEGIN_SRC emacs-lisp
  (defun sort-lines-nocase ()
    (interactive)
    (let ((sort-fold-case t))
      (call-interactively 'sort-lines)))
  #+END_SRC
