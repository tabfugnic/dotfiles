* Initialize
Prioritize the most important things that are needed to run everything
else. This includes navigation since anything that break can become
very disorienting.

** Package Management(use-package)
Manage all packages with use-package. It is required to be
bootstrapped in order to use it.

Setup package archives to pull from. We add MELPA to the list as Gnu
and ELPA are already provided.
#+BEGIN_SRC emacs-lisp
  (add-to-list 'package-archives
               '("melpa" . "https://melpa.org/packages/") t)
#+END_SRC

Use bootstrap to setup use-package so everything else can be managed
through that.
#+BEGIN_SRC emacs-lisp
  (setq use-package-verbose t)
  (setq use-package-always-ensure t)

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (eval-when-compile (require 'use-package))
#+END_SRC

Use straight as a way to manage packages that aren't installed via package archives
#+BEGIN_SRC emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name
          "straight/repos/straight.el/bootstrap.el"
          (or (bound-and-true-p straight-base-dir)
              user-emacs-directory)))
        (bootstrap-version 7))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+END_SRC

* Configure
** Logging
For all things related to logging. Including warning, messages, or any
other helpful outputs.

Instead reporting any native compilation warnings, that are mostly
unhelpful, ignore them.
#+BEGIN_SRC emacs-lisp
  (setq native-comp-async-report-warnings-errors nil)
#+END_SRC

** Interface
Setup the interface to look the way I expect it to look. Prioritize
things that need to go into effect earlier to make it feel less janky.

Remove unused interface artifacts. Making the interface as barebones
as possible. Remove the whole startup message.
#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (setq inhibit-startup-message t)
#+END_SRC

Setup font using [[https://sourcefoundry.org/hack][Hack]], it is a derivative of DeJa Vu with an emphasis
on readability for code. Make the font bigger for less strain on my
eyes.
#+BEGIN_SRC emacs-lisp
  (set-frame-font "-*-Hack-normal-normal-normal-*-44-*-*-*-m-0-iso10646-1")
#+END_SRC

Establish theme defaulting to solarized dark. Use system that allows
me to cycle through the themes easily.
#+BEGIN_SRC emacs-lisp
  (use-package color-theme
    :bind
    ("C-|" . tabfugnic/cycle-theme)
    :init
    (use-package solarized-theme :defer t)
    (defun circular (items) (setf (cdr (last items)) items) items)
    (setq tabfugnic/theme-list (circular '(solarized-dark solarized-light)))
    (defun tabfugnic/cycle-theme()
      (interactive)
      (load-theme (pop tabfugnic/theme-list) t))
    (tabfugnic/cycle-theme))
#+END_SRC

Give more descriptive names to buffers that have the same name. In
this case it uses the folder it's in
#+BEGIN_SRC emacs-lisp
  (require 'uniquify)
  (setq uniquify-buffer-name-style 'post-forward-angle-brackets)
#+END_SRC

Make lines easier to read and use. Using linum and highlighting the
current line.
#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook #'display-line-numbers-mode)
  (global-hl-line-mode t)
#+END_SRC

Show visible bell, good for when the sound is muted
#+BEGIN_SRC emacs-lisp
  (setq visible-bell t)
#+END_SRC

Use ISO date standard date for everything.
#+BEGIN_SRC emacs-lisp
  (setq calendar-date-style 'iso)
#+END_SRC

Diminish is used to simplify the modebar
#+BEGIN_SRC emacs-lisp
  (use-package diminish :defer t)
#+END_SRC
** Editing
Standardize some concepts when editing text. Create expected behaviors
throughout the editing experience. This includes visual cues as
well. These are specific to things that would help make better editing
decisions.

Easily one of the most important things. Use Evil mode. While Emacs is
the ultimate software. Vi had some good ideas on how to edit text.
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :diminish undo-tree-mode
    :init
    (setq evil-toggle-key "C-`")
    (use-package evil-surround
      :defer t
      :config
      (global-evil-surround-mode 1))
    :config
    (evil-mode 1))
#+END_SRC

Always require a new line, this is most important when managing files
in get and prevents bad diffs.
#+BEGIN_SRC emacs-lisp
  (setq require-final-newline t)
#+END_SRC

Visual cue for when lines are too long.
#+BEGIN_SRC emacs-lisp
  (use-package whitespace
    :defer t
    :diminish whitespace-mode
    :init
    (setq whitespace-line-column 80)
    (setq whitespace-style '(face lines-tail))
    (add-hook 'prog-mode-hook 'whitespace-mode))
#+END_SRC

Remove trailing whitespace in a file after save. This prevents
unnecessary changes in diffs.
#+BEGIN_SRC emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

Use two spaces by default for all indenting. Change this depending
upon the language being used.
#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
  (setq-default standard-indent 2)
  (setq default-tab-width 2)
  (setq sh-basic-offset 2)
  (setq sh-indentation 2)
#+END_SRC

#+END_SRC

Rather than having things break on space take advantage of
subwords. This means individual words will be recognized when using
snake_case and camelCase.
#+BEGIN_SRC emacs-lisp
  (global-subword-mode t)
  (diminish 'subword-mode)
#+END_SRC

Automatically add the closing character to an opening character.
#+BEGIN_SRC emacs-lisp
  (electric-pair-mode 1)
  (show-paren-mode 1)
#+END_SRC
** Interactions
This section defines ways to interact with Emacs outside of a specific major mode.

Shortcut need to write out yes or no and instead allow a simple y or n
response.
#+BEGIN_SRC emacs-lisp
  (setq use-short-answers t)
#+END_SRC

Highlight any instance of the text within a document when searching for it.
#+BEGIN_SRC emacs-lisp
  (setq query-replace-highlight t)
#+END_SRC

Remove the use of backup files. This is more trouble than it's
worth. Also prevent automatically saving.
#+BEGIN_SRC emacs-lisp
  (setq make-backup-files nil)
  (setq auto-save-list-file-name  nil)
  (setq auto-save-default nil)
#+END_SRC

Automatically revert buffers to new content if unchanged
#+BEGIN_SRC emacs-lisp
  (put 'erase-buffer 'disabled nil)
  (global-auto-revert-mode t)
  (diminish 'auto-revert-mode)
#+END_SRC

When splitting buffers move to that new buffer immediately

#+BEGIN_SRC emacs-lisp
  (defun split-window-below-and-move()
    (interactive)
    (split-window-below)
    (other-window 1))

  ;; auto move cursor after split
  (defun split-window-right-and-move()
    (interactive)
    (split-window-right)
    (other-window 1))

  (global-set-key "\C-x2" 'split-window-below-and-move)

  (global-set-key "\C-x3" 'split-window-right-and-move)
#+END_SRC

Ask before closing Emacs
#+BEGIN_SRC emacs-lisp
(defun ask-before-closing ()
  "Ask whether or not to close, and then close if y was pressed"
  (interactive)
  (if (y-or-n-p (format "Exit Emacs? "))
      (if (< emacs-major-version 22)
          (save-buffers-kill-terminal)
        (save-buffers-kill-emacs))
    (message "Canceled exit")))

(when window-system
  (global-set-key (kbd "C-x C-c") 'ask-before-closing))
#+END_SRC
** Environment
#+BEGIN_SRC emacs-lisp
  (let ((go-path (shell-command-to-string ". ~/.bashrc; echo -n $GOPATH")))
    (setenv "GOPATH" go-path))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (setq mml-secure-openpgp-signers '("786F8224"))
  (setq epa-file-encrypt-to '("786F8224"))
  (setq epa-file-select-keys 1)
#+END_SRC
* Modes
** Company
Use company for in application context. This needs to be defined early
as many other things use this
#+BEGIN_SRC emacs-lisp
  (use-package company
    :defer t
    :diminish company-mode
    :init
    (add-hook 'after-init-hook 'global-company-mode))
#+END_SRC

** flycheck
Use flycheck for automatic in application linting. Setup early for other modes
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :defer t
    :init
    (add-hook 'after-init-hook #'global-flycheck-mode)
    (use-package flycheck-grammarly
      :defer t
      :init
      (flycheck-grammarly-setup)))
#+END_SRC
** Helm
Use helm for anything involving input. This might be changed to ivy as an experiment initially
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :diminish helm-mode
    :bind
    ("M-x" . helm-M-x)
    ("C-S-s" . helm-do-ag-project-root)
    ("C-x C-f" . helm-find-files)
    :init
    (helm-mode)
    (use-package helm-ag
      :defer t
      :init
      (setq helm-M-x-fuzzy-match t))
    (use-package helm-tramp
      :defer t
      :config
      (add-hook 'helm-tramp-pre-command-hook
                '(lambda ()
                   (projectile-mode 0)))
      (add-hook 'helm-tramp-quit-hook
                '(lambda ()
                   (projectile-mode 1)))))
#+END_SRC

** Dired

Use a better dired, now with extras. Make dired listings are more
verbose

#+BEGIN_SRC emacs-lisp
  (require 'dired-x)
  (setq-default dired-listing-switches "-alhv")
#+END_SRC

** Projectile
Use projectile for searching through project files mostly. Projectil
immediately is able to determine the project root in order to do a
number of different things. Ensure this interface takes advantage of
helm.
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :defer 3
    :diminish projectile-mode
    :init
    (use-package helm-projectile
      :config
      (helm-projectile-on))
    :config
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
    (projectile-global-mode))
#+END_SRC

** asdf(version management)
Manage versions of different tools using asdf(https://asdf-vm.com)
simplifying workflows and limiting tools

#+BEGIN_SRC emacs-lisp
  (load-file "~/dev/tabfugnic/asdf.el/asdf.el")
  (require 'asdf)

  (asdf-enable)
#+END_SRC

** Android

Use android major mode
#+BEGIN_SRC emacs-lisp
  (use-package android-mode
    :defer t
    :init
    (custom-set-variables '(android-mode-sdk-dir "~/opt/android")))
#+END_SRC

** C/C++

#+BEGIN_SRC emacs-lisp
  (c-set-offset 'arglist-intro '+)
#+END_SRC

** Emacs Lisp

Immediately compile an emacs lisp file on load/save. This makes it
easier to run these files and test them.

#+BEGIN_SRC emacs-lisp
  (use-package auto-compile
    :defer t
    :init
    (setq load-prefer-newer t)
    :config
    (auto-compile-on-load-mode)
    (auto-compile-on-save-mode))
#+END_SRC

** Go
#+BEGIN_SRC emacs-lisp
  (use-package go-mode
    :mode "\\.go$"
    :init
    (use-package gotest
      :bind
      (:map go-mode-map
            ("C-c , v" . go-test-current-test)
            ("C-c , a" . go-test-current-project)
            ("C-c , b" . go-test-current-benchmark)
            ("C-c , x" . go-run))))
#+END_SRC
** Javascript/Typescript
Use js2 mode for javascript. It's a bit more full featured.
#+BEGIN_SRC emacs-lisp
(use-package js2-mode
  :mode ("\\.js$" "\\.mjs$")
  :init
  (setq js-indent-level 2))
#+END_SRC

Use RJSX. Consider webmode instead.
#+BEGIN_SRC emacs-lisp
  (use-package rjsx-mode :defer t)
#+END_SRC

Setup a vue mode and let it speak to mmm. This might be something to
use web mode for.
#+BEGIN_SRC emacs-lisp
  (use-package vue-mode
    :defer t
    :init
    (setq mmm-submode-decoration-level 0))
#+END_SRC

Tide is a special setup that uses the Language Server Protocol among
many other things.
#+BEGIN_SRC emacs-lisp
  (use-package tide
    :defer t
    :init
    (defun tabfugnic/tide-setup ()
      (tide-setup)
      (flycheck-mode +1)
      (eldoc-mode +1)
      (tide-hl-identifier-mode +1)
      (company-mode +1)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package typescript-mode
    :defer t
    :hook (tabfugnic/tide-setup)
    :init
    (setq typescript-indent-level 2))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package prettier
    :defer t)
#+END_SRC

** JSON
Basic json parsing

#+BEGIN_SRC emacs-lisp
  (use-package json-mode :defer t)
#+END_SRC

** LSP
Setup the language server protocol

#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :init
    (setq lsp-keymap-prefix "M-p")
    :hook
    ((rust-mode . lsp)
     (enh-ruby-mode . lsp)
     (go-mode . lsp)
     (typescript-mode . lsp))
    :commands lsp
    :custom
    (lsp-rust-analyzer-cargo-watch-command "clippy"))
  (use-package lsp-ui
    :commands lsp-ui-mode
    :config
    (setq lsp-prefer-flymake nil))
  (use-package helm-lsp :commands helm-lsp-workspace-symbol)
  (use-package dap-mode :defer t)
#+END_SRC

** Lua
#+BEGIN_SRC emacs-lisp
  (use-package lua-mode :defer t)
#+END_SRC
** Markdown
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :mode ("\\.markdown$" "\\.md$"))
#+END_SRC
** PHP
#+BEGIN_SRC emacs-lisp
(use-package php-mode
  :mode ("\\.php$" "\\.phtml")
  :interpreter "php")
#+END_SRC

** Python
Setup python along with the ability to use jupyter notebook
#+BEGIN_SRC emacs-lisp
  (use-package python-mode
    :defer t
    :init
    (use-package python-black
      :defer t)
    (use-package ruby-hash-syntax
      :bind ("C-c r h" . ruby-toggle-hash-syntax)))
#+END_SRC

** PlantUML
#+BEGIN_SRC emacs-lisp
  (use-package plantuml-mode
    :mode ("\\.pu$" "\\.puml"  "\\.plantuml"))
#+END_SRC

** Ruby/Rails/RSpec
Setup ruby mode using enhanced ruby mode. Attach this mode to an
nonexhaustive list of files. inferior ruby allows the use of ruby
terminals within emacs making binding pry possible.

Ruby end is just a nice-to-have so that when writing `do` or `def` it
immediately creates an accompanying `end`.

Make toggling between ruby hash syntaxes easier to deal with any time
someone accidentally uses hash rockets
#+BEGIN_SRC emacs-lisp
  (use-package enh-ruby-mode
    :mode ("\\.rb$" "\\.rake$" "Gemfile" "Guardfile" "RakeFile" "Fastfile")
    :interpreter "ruby"
    :init
    (use-package inf-ruby
      :defer t
      :init (add-hook 'after-init-hook 'inf-ruby-switch-setup))
    (use-package ruby-end
      :defer t
      :diminish ruby-end-mode)
    (use-package ruby-hash-syntax
      :bind ("C-c r h" . ruby-toggle-hash-syntax)))
#+END_SRC

Add rspec mode so that it can be toggled between. Ensure that the
formatting always uses progress.
#+BEGIN_SRC emacs-lisp
  (use-package rspec-mode
    :hook (haml-mode html-mode slim-mode enh-ruby-mode)
    :init
    (setq rspec-command-options "--format progress")
    :config
    (evil-set-initial-state 'rspec-compilation-mode 'emacs))
#+END_SRC

For the rare times that I would open a cucumber file
#+BEGIN_SRC emacs-lisp
(use-package feature-mode
  :mode "\\.feature$")
#+END_SRC

Provide slim and haml mode for the times that I use those within a project
#+BEGIN_SRC emacs-lisp
  (use-package slim-mode :defer t)
  (use-package haml-mode :defer t)
#+END_SRC

** Rust
#+BEGIN_SRC emacs-lisp
  (use-package rustic
    :defer t
    :init
    (setq rustic-format-on-save t)
    (add-hook 'rustic-mode-hook 'rk/rustic-mode-hook))
  (use-package cargo
    :defer t
    :init
    (setenv "PATH" (concat (getenv "PATH") ":~/.cargo/bin"))
    (setq exec-path (append exec-path '("~/.cargo/bin"))))
  (use-package flycheck-rust
    :hook (flycheck-mode . flycheck-rust-setup))
#+END_SRC
** SCSS Mode
#+BEGIN_SRC emacs-lisp
(use-package scss-mode
  :mode ("\\.scss$" "\\.scss\\.erb$")
  :interpreter "scss"
  :init
  (setq scss-compile-at-save nil)
  (setq css-indent-offset 2))
#+END_SRC

** Web
Use web mode for most web related files. It has an extensive library
it supports, it's not perfect, but makes things significantly simpler
than using something like multi major mode.
#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :mode ("\\.erb$" "\\.liquid$" "\\.tsx$")
    :init
    (defun tabfugnic/web-mode-hook()
      (pcase (file-name-extension buffer-file-name)
        ("tsx" (tabfugnic/tide-setup))
        ("erb" (rspec-mode 1))
        (_ (lambda() (message buffer-file-name))))
      )
    (add-hook 'web-mode-hook 'tabfugnic/web-mode-hook))
#+END_SRC
** Yaml
#+BEGIN_SRC emacs-lisp
(use-package yaml-mode
  :mode ("\\.yml$" "\\.yaml$")
  :interpreter "yaml")
#+END_SRC

* Applications
** RSS
Newsticker for RSS feeds

#+BEGIN_SRC emacs-lisp
  (use-package elfeed
    :defer t
    :bind ("C-x w" . tabfugnic/elfeed)
    :init
    (use-package elfeed-org
      :init (setq rmh-elfeed-org-files (list "/home/eric/cloud/org/rss.org"))
      :config (elfeed-org))
    :config
    (evil-set-initial-state 'elfeed-search-mode 'emacs)
    (evil-set-initial-state 'elfeed-show-mode 'emacs))

  (defun tabfugnic/elfeed()
    "Open elfeed and force open from db."
    (interactive)
    (elfeed-db-load)
    (elfeed))
#+END_SRC

** Blog

Setup blog
#+BEGIN_SRC emacs-lisp
  (setq tabfugnic/blog-dir "~/blog")
  (setq tabfugnic/blog-posts-dir (expand-file-name "_posts" tabfugnic/blog-dir))

  (defun tabfugnic/blog-new-entry(title)
    (interactive "MTitle: ")
    (let ((slug (tabfugnic/sluggify title)))
      (find-file (expand-file-name
                       (concat (format-time-string "%F") "-" slug ".md")
                       tabfugnic/blog-posts-dir))
      (insert "---\n")
      (insert "layout: post\n")
      (insert (format "title: %s\n" title))
      (insert (format "date: %s\n" (format-time-string "%F %R")))
      (insert "tags: \n")
      (insert "---\n")))

  (defun tabfugnic/sluggify(string)
    (replace-regexp-in-string
     "[^a-z0-9-]" "" (replace-regexp-in-string
                      "\\\s" "-" (downcase string))))
#+END_SRC

** Email(mu4e)
Use mu4e for all email. This takes advantage of offlineimap and msmtp

#+BEGIN_SRC emacs-lisp
  (use-package mu4e
    :defer t
    :load-path "/usr/share/emacs/site-lisp/elpa/mu4e-1.10.8"
    :bind ("C-x m" . mu4e)
    :init
    (add-hook 'mu4e-view-mode-hook 'visual-line-mode)
    (add-hook 'mu4e-compose-mode-hook 'mml-secure-message-sign)
    (add-hook 'mu4e-compose-mode-hook (defun my-setup-epa-hook () (epa-mail-mode)))
    (add-hook 'mu4e-view-mode-hook (defun my-view-mode-hook () (epa-mail-mode)))
    (add-hook
     'mu4e-compose-pre-hook
     (defun my-set-from-address ()
       "Set the From address based on the To address of the original."
       (let ((msg mu4e-compose-parent-message))
         (when msg
           (cond
            ((mu4e-message-contact-field-matches msg :to "/me@.*\\.ericj\\.co/")
             (setq user-mail-address (cdar (mu4e-message-field msg :to)))))))))
    (use-package mu4e-alert
      :defer t
      :init
      (setq mu4e-maildir-shortcuts
            '( (:maildir "/inbox/" :key ?i)
               (:maildir "/sent/" :key ?s)
               (:maildir "/archive/" :key ?a)))

      (add-hook 'after-init-hook #'mu4e-alert-enable-notifications)
      (add-hook 'after-init-hook #'mu4e-alert-enable-mode-line-display))
    :config
    (mu4e-alert-set-default-style 'libnotify)


    :config
    (require 'mu4e-org)
    (setq mu4e-contexts
          `(,(make-mu4e-context
              :name "personal"
              :match-func (lambda (msg)
                            (when msg
                              (string-match-p "^/personal" (mu4e-message-field msg :maildir))))
              :vars '((user-mail-address . "me@ericj.co")
                      (mu4e-drafts-folder . "/personal/drafts")
                      (mu4e-sent-folder . "/personal/sent")
                      (mu4e-trash-folder . "/personal/trash")
                      (mu4e-refile-folder . "/personal/archive")))
            ,(make-mu4e-context
              :name "work"
              :match-func (lambda (msg)
                            (when msg
                              (string-match-p "^/work" (mu4e-message-field msg :maildir))))
              :vars '((user-mail-address . "eric.collins@curatedforyou.io")
                      (mu4e-drafts-folder . "/work/drafts")
                      (mu4e-sent-folder . "/work/sent")
                      (mu4e-trash-folder . "/work/trash")
                      (mu4e-refile-folder . "/work/archive")))))

    (setq mu4e-action-tags-header "X-Keywords")
    (setq mu4e-attachment-dir  "~/Downloads")
    (setq mu4e-compose-dont-reply-to-self t)
    (setq user-full-name  "Eric J Collins")
    (setq mu4e-compose-signature (string-join `("Eric J. Collins" "VP of Engineering" "https://versatrial.io" ,(getenv "PHONE_NUMBER")) "\n"))
    (setq mu4e-update-interval 180)
    (setq mu4e-user-mail-address-list '("me@ericj.co" "hello@ericcollins.me" "/me@.*\\.ericj\\\.co/" "eric.collins@curatedforyou.io"))
    (setq mu4e-change-filenames-when-moving t)
    (setq message-send-mail-function 'message-send-mail-with-sendmail)
    (setq sendmail-program "/usr/local/bin/msmtp-enqueue.sh")
    (setq message-sendmail-extra-arguments '("--read-envelope-from"))
    (setq message-sendmail-f-is-evil 't)

    (setq mu4e-alert-interesting-mail-query
          (concat
           "flag:unread"
           " AND NOT flag:trashed"
           " AND maildir:"
           "\"/INBOX\""))

    (setq org-mu4e-link-query-in-headers-mode nil)

    (add-to-list 'mu4e-headers-custom-markers
                 '("Stale messages"
                   (lambda (msg &optional n)
                     (let ((email (cdar (mu4e-message-field msg :from))))
                       (or (string-match "\\@nytimes.com" email)
                           (string-match "\\@trello.com" email)
                           (string-match "\\@github.com" email)
                           (string-match "\\@notifications.heroku.com" email))))))

    (add-to-list 'mu4e-view-actions
                 '("xViewXWidget" . mu4e-action-view-with-xwidget) t)
    (add-to-list 'mu4e-marks
                 `(trash
                   :char ("d" . "▼")
                   :prompt "dtrash"
                   :dyn-target (lambda (target msg) (mu4e-get-trash-folder msg))
                   :action (lambda (docid msg target) (mu4e--server-move docid
                                                                         (mu4e--mark-check-target target) "-N"))))

    (defun tabfugnic/mu4e-headers-mark-stale-for-delete()
      (interactive)
      (mu4e-headers-for-each
       (lambda (msg)
         (let ((tags (mu4e-message-field msg :tags))
               (date (mu4e-message-field msg :date))
               (one-day-ago (subtract-time (current-time) 86400)))
           (when (and (member "temporary" tags) (time-less-p date one-day-ago))
             (mu4e-mark-at-point 'trash msg)))))))
    #+END_SRC

** ERC
   #+BEGIN_SRC emacs-lisp
(use-package erc
  :bind ("C-c e r" . tabfugnic/reset-erc-track-mode)
  :init
  (use-package erc-image
    :defer t
    :config
    (add-to-list 'erc-modules 'image))

  (setq erc-prompt-for-nickserv-password nil)
  (setq erc-fill-function 'erc-fill-static)
  (setq erc-fill-static-center 22)
  (setq erc-track-exclude-types '("JOIN" "NICK" "PART" "MODE"))
  (setq erc-hide-list '("JOIN" "PART" "QUIT" "MODE"))

  (setq erc-keywords '("\\NYC\\b"
                       "\\nyc\\b"
                       "\\pr\\b"
                       "\\PR\\b"
                       "\\:statue_of_liberty:\\b"
                       "\\corgi\\b"))

  (setq ercn-notify-rules
        '((current-nick . all)
          (keyword . all)))

  (add-hook 'ercn-notify 'tabfugnic/do-notify)

  :config
  (erc-update-modules)

  (require 'erc-join)
  (setq erc-autojoin-channels-alist
        '(("freenode.net" "#thoughtbot" "#emacs" "#emacsnyc")))
  (erc-autojoin-enable))

(defun tabfugnic/erc-start-or-switch ()
  "Connect to ERC, or switch to last active buffer"
  (interactive)
  (cond
    ((get-buffer "irc.freenode.net:6667")
     (erc-track-switch-buffer 1))
    (t (erc :server "irc.freenode.net" :port 6667 :nick "tabfugnic"))))

(defun tabfugnic/reset-erc-track-mode ()
  (interactive)
  (setq erc-modified-channels-alist nil)
  (erc-modified-channels-display))

(defun tabfugnic/do-notify (nickname message)
  (with-temp-buffer
    (shell-command (format "notify-send '%s: %s' -t 5000" nickname message) t)))
#+END_SRC
** AI
   #+BEGIN_SRC emacs-lisp
     (use-package whisper
       :straight (whisper :type git :host github :repo "natrys/whisper.el")
       :bind ("C-:" . whisper-run))

     (use-package org-ai
       :ensure t
       :commands (org-ai-mode
                  org-ai-global-mode)
       :init
       (add-hook 'org-mode-hook #'org-ai-mode) ; enable org-ai in org-mode
       (org-ai-global-mode) ; installs global keybindings on C-c M-a
       (setq org-ai-openai-api-token (getenv "OPENAI_API_TOKEN"))
       :config
       (setq tabfugnic/prompts-dir (concat (file-name-directory load-file-name) "prompts"))
       (defun tabfugnic/org-ai-on-buffer (prompt)
         (org-ai-on-region
          (point-min)
          (point-max)
          (with-temp-buffer
            (insert-file-contents (concat tabfugnic/prompts-dir "/" "news-summary"))
            (buffer-string))))
       (defun tabfugnic/org-ai-summarize-news()
         (interactive)
         (tabfugnic/org-ai-on-buffer "news-summary")))
   #+END_SRC
* Git(Magit)
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :bind ("C-x g" . magit-status)
    :defer 1
    :config
    (defun tabfugnic/magit-delete-branch (branch)
      (interactive
       (magit-read-local-branch "Delete branch" (magit-get-previous-branch)))
      (magit-run-git "delete-branch" "" branch)))
#+END_SRC

* Org mode
#+BEGIN_SRC emacs-lisp
  (use-package org
    :defer t
    :bind (("C-c l" . org-store-link)
           ("C-c c" . org-capture)
           ("C-c a" . org-agenda)
           ("C-c C-j" . org-journal-new-entry)
           ("C-c b" . org-iswitchb))
    :init
    (setq org-startup-folded t)
    (setq org-crypt-key "786F8224")
    (load-file "~/dev/tabfugnic/org-retro/org-retro.el")
    (require 'org-retro)
    (use-package org-journal
      :defer 1
      :init
      (setq org-journal-dir "~/cloud/journal")
      (setq org-journal-date-format "%A %Y/%m/%d")
      (setq org-journal-file-type 'monthly)
      (setq org-journal-file-format "%Y%m")
      (setq org-journal-encrypt-journal t)
      (setq org-journal-carryover-items nil)
      (add-hook 'org-journal-mode-hook 'auto-fill-mode))
    (use-package org-caldav
      :defer t
      :init
      (setq org-caldav-url "https://cloud.ericj.co/remote.php/dav/calendars/tabfugnic")
      (setq org-caldav-calendar-id "calendar")
      (setq org-caldev-inbox "/home/eric/calendar.org")
      (setq org-icalendar-timezone "America/New_York"))

    (org-babel-do-load-languages
     'org-babel-load-languages
     '((shell . t)))
    (require 'org-agenda)
    (setq org-directory "~/cloud/org/")

    (defun tabfugnic/org-file (file)
      (concat org-directory file))

    (setq org-agenda-files (list (tabfugnic/org-file "todos.org")))

    (setq org-capture-templates
          `(("i" "Inbox"
             entry
             (file ,(tabfugnic/org-file "inbox.org"))
             "* %?\n")
            ("di" "dmenu Inbox"
             entry
             (file ,(tabfugnic/org-file "inbox.org"))
             "* %i\n")
            ("m" "Mail Inbox"
             entry
             (file ,(tabfugnic/org-file "inbox.org"))
             "* %?\n%a")
            ("c" "Copy Inbox"
             entry
             (file ,(tabfugnic/org-file "inbox.org"))
             "* %?\n%x\n")
            ("r" "RSS Feeds"
             entry
             (file+headline ,(tabfugnic/org-file "rss.org") "Unsorted Feeds")
             "*** [[%x][%?]]")))

    ;; Taken from
    ;; https://www.reddit.com/r/emacs/comments/6lzyg2/heres_how_to_do_emacsclient_global_orgcapture/
    ;; Modified slightly
    (defadvice org-capture-finalize
        (after delete-capture-frame activate)
      "Advise capture-finalize to close the frame"
      (if (equal "capture" (frame-parameter nil 'name))
          (delete-frame)))

    (defadvice org-capture-destroy
        (after delete-capture-frame activate)
      "Advise capture-destroy to close the frame"
      (if (equal "capture" (frame-parameter nil 'name))
          (delete-frame)))

    (defun make-capture-frame (&optional capture-key)
      "Create a new frame and run org-capture."
      (interactive)
      (or capture-key (setq capture-key "i"))
      (make-frame '((name . "capture")))
      (select-frame-by-name "capture")
      (delete-other-windows)
      (cl-letf
          (((symbol-function 'switch-to-buffer-other-window)
            #'switch-to-buffer))
        (org-capture nil capture-key))))
#+END_SRC

* Utils
  #+BEGIN_SRC emacs-lisp
    ;; (setq tabfugnic/previous-commands '())
    (set-face-attribute 'comint-highlight-prompt nil
                        :inherit nil)

    (defun tabfugnic/repeat-shell-commandline-in-project()
      (interactive)
      (setq tabfugnic/previous-command)
      ;; (setq tabfugnic/previous-commands
      ;;       (cons '((vc-root-dir) . "thing") tabfugnic/previous-commands))
    )
  #+END_SRC


  #+BEGIN_SRC emacs-lisp
(defun gitrep()
  (interactive "*")
  (find-file "~/dev"))
  #+END_SRC

  Sort lines with out case
  #+BEGIN_SRC emacs-lisp
  (defun sort-lines-nocase ()
    (interactive)
    (let ((sort-fold-case t))
      (call-interactively 'sort-lines)))
  #+END_SRC
* Post Setup
** Manage local configurations in non version controlled file
Configurations from the interface and ones that happen without code
are by default placed in .emacs file. This redirects that to a non
version controlled file so I don't have to manage that every time. I
want to make changes. This then loads it so that this file is also
used.

#+BEGIN_SRC emacs-lisp
  (setq custom-file "~/.emacs.local")
  (load custom-file :noerror)
#+END_SRC

** Start Emacs Server
Use emacs server so that loading any subsequent emacs instances will
boot immediately. In practice I use that for the occasion I use git on
the command line

#+BEGIN_SRC emacs-lisp
  (server-start)
#+END_SRC
** Break on comma
Break on commas
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-,") 'tabfugnic/break-on-comma)
  (global-set-key (kbd "C-;") 'tabfugnic/toggle-single-or-multiline-list)

  (defun tabfugnic/break-on-comma()
    (interactive)
    (while (not (looking-at ","))
      (forward-char))
    (forward-char)
    (if (not (looking-at "^J"))
        (newline-and-indent)))

  (defun tabfugnic/toggle-single-or-multiline-list()
    (interactive)
    (if (not (tabfugnic/singleline-p))
        (tabfugnic/singleline-list)
      (tabfugnic/multiline-list)))

  (defun tabfugnic/multiline-list()
    (interactive)
    (let ((beg (point)))
      (forward-char)
      (newline-and-indent)
      (end-of-line 0)
      (backward-char)
      (forward-list)
      (backward-char)
      (if (not (looking-at ","))
          (insert ","))
      (while (<= beg (point))
        (backward-char)
        (when (and (looking-at ",") (tabfugnic/in-parent-list-p beg))
          (forward-char)
          (newline-and-indent)
          (previous-line)
          (end-of-line)
          (backward-char))
        )
      (forward-char)))

  (defun tabfugnic/singleline-list()
    (interactive)
    (let ((beg (line-number-at-pos)))
      (forward-list)
      (while (< beg (line-number-at-pos))
        (join-line))
      (backward-char)
      (forward-list)
      (backward-char 2)
      (if (looking-at ",")
          (delete-forward-char 1))
      (forward-char)
      (backward-list)))

  (defun tabfugnic/singleline-p()
    (let ((beg-line (line-number-at-pos)) (start (point)))
      (forward-list)
      (let ((end-line (line-number-at-pos)))
        (goto-char start)
        (eq beg-line end-line))))

  (defun tabfugnic/in-parent-list-p(parent-beg)
    (let ((start (point)))
      (backward-up-list)
      (when (eq parent-beg (point))
        (goto-char start)
        t)))

#+END_SRC
** Directory
#+BEGIN_SRC emacs-lisp
  (defun tabfugnic/next-file-in-directory(&optional number)
    (interactive)
    (or number (setq number 1))
    (let
        ((filename (file-name-nondirectory (buffer-file-name)))
         (files (cl-remove-if
                 'file-directory-p
                 (directory-files
                  (file-name-directory (buffer-file-name))
                  nil
                  directory-files-no-dot-files-regexp))))
      (find-file
       (nth (mod (+ (cl-position filename files :test 'equal) number)
         (length files))
        files))))

  (defun tabfugnic/previous-file-in-directory()
    (interactive)
    (tabfugnic/next-file-in-directory -1))


  (global-set-key (kbd "C-{") 'tabfugnic/previous-file-in-directory)
  (global-set-key (kbd "C-}") 'tabfugnic/next-file-in-directory)
#+END_SRC
** Important Files
  #+BEGIN_SRC emacs-lisp
    (defun tabfugnic/open-inbox ()
    (interactive)
     (find-file (expand-file-name "~/cloud/org/inbox.org")))

    (global-set-key (kbd "C-c i") 'tabfugnic/open-inbox)
#+END_SRC
